class Solution {
public:
    static bool comp(vector<int> &a , vector<int> &b){ 
        return a[0] > b[0];
    }
    
    int find(int v, vector<int>&parent){  
        if(parent[v] == v){
             
            return v;
        }
         
        return parent[v]= find(parent[v],parent);
    }
    bool Union(int a, int b, vector<int> &rank, vector<int>& parent){
       
        int x = find(a,parent);
      
        int y = find(b, parent);
        
        if(x==y){
            return false;
        }
        else{
            if(rank[x] == rank[y]){
                rank[x]++;
            
            }
            else if(rank[x] < rank[y]){
                swap(x,y);
            }
            parent[y] = x;
            
        }
        
        return true;
        
    }
    
    int maxNumEdgesToRemove(int n, vector<vector<int>>& edges) {
        sort(edges.begin(), edges.end(), comp); 
        vector<int> parentA(n+1) ; 
        vector<int> parentB(n+1);
        vector<int> rankA(n+1);
        vector<int> rankB(n+1);
        for(int i =1;i<n+1;i++){
            parentA[i] = i;
            parentB[i]= i;
            rankA[i] = 1; 
            rankB[i] = 1;
            
        }
        int mergeA= 1, mergeB= 1; 
        int removedEdges = 0;
        for(auto e : edges){
            if(e[0]==3){ 
                bool x =  Union(e[1],e[2],rankA,parentA);
                bool y =  Union(e[1],e[2], rankB,parentB);
                if(x) {
                    mergeA++; 
                }
                if(y){
                    mergeB++; 
                }
                if(x== false  &&  y == false){
                    removedEdges++; 
                    
                    
                }
                
            }
            else if(e[0]==2){  
                 bool y = Union(e[1],e[2], rankB,parentB);
                 if(y) {
                    mergeB++;
                }
                else {
                    removedEdges++;
                }
            }
            else{  
                 bool x =  Union(e[1],e[2],rankA, parentA);
                  if(x) {
                    mergeA++;
                }
                else {
                    removedEdges++;
                }
                
            }
            
        }
        if(mergeA==n && mergeB == n){ 
            return removedEdges;
        }
        else 
            return -1;
        
        
    }
};
