/*

Given an array arr[] of distinct elements. Find the minimum number of swaps required to sort the array in strictly increasing order.

Examples:

Input: arr[] = [2, 8, 5, 4]
Output: 1
Explanation: Swap 8 with 4 to get the sorted array.
Input: arr[] = [10, 19, 6, 3, 5]
Output: 2
Explanation: Swap 10 with 3 and 19 with 5 to get the sorted array.
Input: arr[] = [1, 3, 4, 5, 6]
Output: 0
Explanation: Input array is already sorted.
Constraints:
1 ≤ arr.size() ≤ 105
1 ≤ arr[i] ≤ 109



*


class Solution {
  public:
    // Function to find the minimum number of swaps required to sort the array.
    int minSwaps(vector<int>& arr) {
        // Code here
        vector<pair<int,int>> map;
        for(int i=0;i<arr.size();i++){
        map.push_back({arr[i],i});
        }
        
        sort(map.begin(),map.end());
        int count=0;
        for(int i=0;i<arr.size();){
            pair<int,int> entry=map[i];
            int val=entry.first;
            int index=entry.second;
            
            if(i!=index){
                swap(map[i],map[index]);
                count++;
            }
            else{
                i++;
            }
            
        }
        return count;
    }
};
