class Solution {
public:
     int par[10000] ; 
    int size[10000] ;
    void make(int v )
    {
    par[v]=v ;  
        size[v]=1  ;
    }
    
    int find(int v )
    {
        if(par[v]==v)
            return v ; 
        return par[v]  = find(par[v]) ; 
    }
    
    void Union(int u , int w )
    {
       int a  = find(u) ; 
        int b = find(w)  ; 
         if(a!=b)
         {
             
             if(size[a]<size[b])
             {
                 swap(a, b) ; 
             }
             par[b] =a ; 
             size[a]+=size[b]  ;
         }
 
    }
    
    
    
    
    
    
    vector<bool> friendRequests(int n, vector<vector<int>>& res, vector<vector<int>>& req) {
       vector<bool> ans ;
        
        for(int i = 0; i<n; i++ )
        {
            make(i) ; 
        }
        for(auto it : req )
        {
            int a = find(it[0]); 
            int b = find(it[1]) ;
            int f=1 ;
            for(auto itr : res)
            {
                int ap = find(itr[0]) ;
                int bp = find(itr[1]) ;
                
                if(ap==a && bp==b || ap==b && bp==a)
                {
                    f=0;
                    break ;
                }
            }
            if(f)
                Union(a, b ) ;
            ans.push_back(f) ;
            
        }
        return ans; 
    }
    
};
