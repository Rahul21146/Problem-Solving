/*

Given an array arr[] denoting the cost of stock on each day, the task is to find the maximum total profit if we can buy and sell the stocks any number of times.

Note: We can only sell a stock which we have bought earlier and we cannot hold multiple stocks on any day.

Examples:

Input: arr[] = [100, 180, 260, 310, 40, 535, 695]
Output: 865
Explanation: Buy the stock on day 0 and sell it on day 3 => 310 – 100 = 210 Buy the stock on day 4 and sell it on day 6 => 695 – 40 = 655 Maximum Profit  = 210 + 655 = 865
Input: arr[] = [4, 2, 2, 2, 4]
Output: 2
Explanation: Buy the stock on day 3 and sell it on day 4 => 4 – 2 = 2
Input: arr[] = [4, 2]
Output: 0
Explanation: Don't Buy the stock.
Constraints:
2 ≤ arr.size() ≤ 106
0 ≤ arr[i] ≤ 106


*/

class Solution {
  public:
    
    int solve(vector<int>& arr, int i, bool buy, vector<vector<int>>& dp) {
        
        if(i >= arr.size()){
            return 0;
        }
        if(dp[i][buy] != -1){
            return dp[i][buy];
        }
        int profit = 0;
        
        if(buy){
            int take = -arr[i] + solve(arr,i+1,false,dp);
            int skip = solve(arr,i+1,true,dp);
            profit = max(take,skip);
        }else{
            int take = arr[i] + solve(arr,i+1,true,dp);
            int skip = solve(arr,i+1,false,dp);
            profit = max(take,skip);
        }
        return dp[i][buy] = profit;
    }
    int stockBuySell(vector<int> &arr) {
        
        vector<vector<int>>dp(arr.size()+1,vector<int>(2,-1));
        return solve(arr,0,true,dp);
    }
};
